/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ProjectSlugImport } from "./routes/$projectSlug";
import { Route as ProjectSlugWorkflowSlugImport } from "./routes/$projectSlug_.$workflowSlug";
import { Route as ProjectSlugWorkflowSlugVVersionImport } from "./routes/$projectSlug_.$workflowSlug_.v.$version";

// Create Virtual Routes

const LoginLazyImport = createFileRoute("/login")();
const AboutLazyImport = createFileRoute("/about")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/login.lazy").then((d) => d.Route));

const AboutLazyRoute = AboutLazyImport.update({
  path: "/about",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const ProjectSlugRoute = ProjectSlugImport.update({
  path: "/$projectSlug",
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const ProjectSlugWorkflowSlugRoute = ProjectSlugWorkflowSlugImport.update({
  path: "/$projectSlug/$workflowSlug",
  getParentRoute: () => rootRoute,
} as any);

const ProjectSlugWorkflowSlugVVersionRoute =
  ProjectSlugWorkflowSlugVVersionImport.update({
    path: "/$projectSlug/$workflowSlug/v/$version",
    getParentRoute: () => rootRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/$projectSlug": {
      id: "/$projectSlug";
      path: "/$projectSlug";
      fullPath: "/$projectSlug";
      preLoaderRoute: typeof ProjectSlugImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/$projectSlug/$workflowSlug": {
      id: "/$projectSlug/$workflowSlug";
      path: "/$projectSlug/$workflowSlug";
      fullPath: "/$projectSlug/$workflowSlug";
      preLoaderRoute: typeof ProjectSlugWorkflowSlugImport;
      parentRoute: typeof rootRoute;
    };
    "/$projectSlug/$workflowSlug/v/$version": {
      id: "/$projectSlug/$workflowSlug/v/$version";
      path: "/$projectSlug/$workflowSlug/v/$version";
      fullPath: "/$projectSlug/$workflowSlug/v/$version";
      preLoaderRoute: typeof ProjectSlugWorkflowSlugVVersionImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  ProjectSlugRoute,
  AboutLazyRoute,
  LoginLazyRoute,
  ProjectSlugWorkflowSlugRoute,
  ProjectSlugWorkflowSlugVVersionRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$projectSlug",
        "/about",
        "/login",
        "/$projectSlug/$workflowSlug",
        "/$projectSlug/$workflowSlug/v/$version"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/$projectSlug": {
      "filePath": "$projectSlug.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/$projectSlug/$workflowSlug": {
      "filePath": "$projectSlug_.$workflowSlug.tsx"
    },
    "/$projectSlug/$workflowSlug/v/$version": {
      "filePath": "$projectSlug_.$workflowSlug_.v.$version.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
