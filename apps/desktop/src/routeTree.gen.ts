/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProjectSlugImport } from './routes/$projectSlug'
import { Route as WorkflowProjectSlugWorkflowSlugImport } from './routes/_workflow.$projectSlug_.$workflowSlug'
import { Route as WorkflowProjectSlugWorkflowSlugIndexImport } from './routes/_workflow.$projectSlug_.$workflowSlug.index'
import { Route as WorkflowProjectSlugWorkflowSlugVersionsImport } from './routes/_workflow.$projectSlug_.$workflowSlug.versions'
import { Route as WorkflowProjectSlugWorkflowSlugApiImport } from './routes/_workflow.$projectSlug_.$workflowSlug.api'
import { Route as ProjectSlugWorkflowSlugVVersionImport } from './routes/$projectSlug_.$workflowSlug_.v.$version'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const ProjectSlugRoute = ProjectSlugImport.update({
  path: '/$projectSlug',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const WorkflowProjectSlugWorkflowSlugRoute =
  WorkflowProjectSlugWorkflowSlugImport.update({
    path: '/$projectSlug/$workflowSlug',
    getParentRoute: () => rootRoute,
  } as any)

const WorkflowProjectSlugWorkflowSlugIndexRoute =
  WorkflowProjectSlugWorkflowSlugIndexImport.update({
    path: '/',
    getParentRoute: () => WorkflowProjectSlugWorkflowSlugRoute,
  } as any)

const WorkflowProjectSlugWorkflowSlugVersionsRoute =
  WorkflowProjectSlugWorkflowSlugVersionsImport.update({
    path: '/versions',
    getParentRoute: () => WorkflowProjectSlugWorkflowSlugRoute,
  } as any)

const WorkflowProjectSlugWorkflowSlugApiRoute =
  WorkflowProjectSlugWorkflowSlugApiImport.update({
    path: '/api',
    getParentRoute: () => WorkflowProjectSlugWorkflowSlugRoute,
  } as any)

const ProjectSlugWorkflowSlugVVersionRoute =
  ProjectSlugWorkflowSlugVVersionImport.update({
    path: '/$projectSlug/$workflowSlug/v/$version',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/$projectSlug': {
      id: '/$projectSlug'
      path: '/$projectSlug'
      fullPath: '/$projectSlug'
      preLoaderRoute: typeof ProjectSlugImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/_workflow/$projectSlug/$workflowSlug': {
      id: '/_workflow/$projectSlug/$workflowSlug'
      path: '/$projectSlug/$workflowSlug'
      fullPath: '/$projectSlug/$workflowSlug'
      preLoaderRoute: typeof WorkflowProjectSlugWorkflowSlugImport
      parentRoute: typeof rootRoute
    }
    '/$projectSlug/$workflowSlug/v/$version': {
      id: '/$projectSlug/$workflowSlug/v/$version'
      path: '/$projectSlug/$workflowSlug/v/$version'
      fullPath: '/$projectSlug/$workflowSlug/v/$version'
      preLoaderRoute: typeof ProjectSlugWorkflowSlugVVersionImport
      parentRoute: typeof rootRoute
    }
    '/_workflow/$projectSlug/$workflowSlug/api': {
      id: '/_workflow/$projectSlug/$workflowSlug/api'
      path: '/api'
      fullPath: '/$projectSlug/$workflowSlug/api'
      preLoaderRoute: typeof WorkflowProjectSlugWorkflowSlugApiImport
      parentRoute: typeof WorkflowProjectSlugWorkflowSlugImport
    }
    '/_workflow/$projectSlug/$workflowSlug/versions': {
      id: '/_workflow/$projectSlug/$workflowSlug/versions'
      path: '/versions'
      fullPath: '/$projectSlug/$workflowSlug/versions'
      preLoaderRoute: typeof WorkflowProjectSlugWorkflowSlugVersionsImport
      parentRoute: typeof WorkflowProjectSlugWorkflowSlugImport
    }
    '/_workflow/$projectSlug/$workflowSlug/': {
      id: '/_workflow/$projectSlug/$workflowSlug/'
      path: '/'
      fullPath: '/$projectSlug/$workflowSlug/'
      preLoaderRoute: typeof WorkflowProjectSlugWorkflowSlugIndexImport
      parentRoute: typeof WorkflowProjectSlugWorkflowSlugImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  ProjectSlugRoute,
  AboutLazyRoute,
  LoginLazyRoute,
  WorkflowProjectSlugWorkflowSlugRoute:
    WorkflowProjectSlugWorkflowSlugRoute.addChildren({
      WorkflowProjectSlugWorkflowSlugApiRoute,
      WorkflowProjectSlugWorkflowSlugVersionsRoute,
      WorkflowProjectSlugWorkflowSlugIndexRoute,
    }),
  ProjectSlugWorkflowSlugVVersionRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$projectSlug",
        "/about",
        "/login",
        "/_workflow/$projectSlug/$workflowSlug",
        "/$projectSlug/$workflowSlug/v/$version"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/$projectSlug": {
      "filePath": "$projectSlug.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/_workflow/$projectSlug/$workflowSlug": {
      "filePath": "_workflow.$projectSlug_.$workflowSlug.tsx",
      "children": [
        "/_workflow/$projectSlug/$workflowSlug/api",
        "/_workflow/$projectSlug/$workflowSlug/versions",
        "/_workflow/$projectSlug/$workflowSlug/"
      ]
    },
    "/$projectSlug/$workflowSlug/v/$version": {
      "filePath": "$projectSlug_.$workflowSlug_.v.$version.tsx"
    },
    "/_workflow/$projectSlug/$workflowSlug/api": {
      "filePath": "_workflow.$projectSlug_.$workflowSlug.api.tsx",
      "parent": "/_workflow/$projectSlug/$workflowSlug"
    },
    "/_workflow/$projectSlug/$workflowSlug/versions": {
      "filePath": "_workflow.$projectSlug_.$workflowSlug.versions.tsx",
      "parent": "/_workflow/$projectSlug/$workflowSlug"
    },
    "/_workflow/$projectSlug/$workflowSlug/": {
      "filePath": "_workflow.$projectSlug_.$workflowSlug.index.tsx",
      "parent": "/_workflow/$projectSlug/$workflowSlug"
    }
  }
}
ROUTE_MANIFEST_END */
