/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as LayoutProjectSlugLayoutImport } from "./routes/_layout.$projectSlug/_layout";
import { Route as LayoutProjectSlugLayoutWorkflowSlugApiImport } from "./routes/_layout.$projectSlug/_layout.$workflowSlug/api";
import { Route as LayoutProjectSlugLayoutWorkflowSlugIndexImport } from "./routes/_layout.$projectSlug/_layout.$workflowSlug/index";
import { Route as LayoutProjectSlugLayoutWorkflowSlugVersionsImport } from "./routes/_layout.$projectSlug/_layout.$workflowSlug/versions";
import { Route as LayoutProjectSlugIndexImport } from "./routes/_layout.$projectSlug/index";
import { Route as ProjectSlugWorkflowSlugVVersionImport } from "./routes/$projectSlug.$workflowSlug.v.$version";

// Create Virtual Routes

const LoginLazyImport = createFileRoute("/login")();
const AboutLazyImport = createFileRoute("/about")();
const IndexLazyImport = createFileRoute("/")();
const LayoutProjectSlugImport = createFileRoute("/_layout/$projectSlug")();

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/login.lazy").then((d) => d.Route));

const AboutLazyRoute = AboutLazyImport.update({
  path: "/about",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const LayoutRoute = LayoutImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const LayoutProjectSlugRoute = LayoutProjectSlugImport.update({
  path: "/$projectSlug",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutProjectSlugIndexRoute = LayoutProjectSlugIndexImport.update({
  path: "/",
  getParentRoute: () => LayoutProjectSlugRoute,
} as any);

const LayoutProjectSlugLayoutRoute = LayoutProjectSlugLayoutImport.update({
  id: "/_layout",
  getParentRoute: () => LayoutProjectSlugRoute,
} as any);

const ProjectSlugWorkflowSlugVVersionRoute =
  ProjectSlugWorkflowSlugVVersionImport.update({
    path: "/$projectSlug/$workflowSlug/v/$version",
    getParentRoute: () => rootRoute,
  } as any);

const LayoutProjectSlugLayoutWorkflowSlugIndexRoute =
  LayoutProjectSlugLayoutWorkflowSlugIndexImport.update({
    path: "/$workflowSlug/",
    getParentRoute: () => LayoutProjectSlugLayoutRoute,
  } as any);

const LayoutProjectSlugLayoutWorkflowSlugVersionsRoute =
  LayoutProjectSlugLayoutWorkflowSlugVersionsImport.update({
    path: "/$workflowSlug/versions",
    getParentRoute: () => LayoutProjectSlugLayoutRoute,
  } as any);

const LayoutProjectSlugLayoutWorkflowSlugApiRoute =
  LayoutProjectSlugLayoutWorkflowSlugApiImport.update({
    path: "/$workflowSlug/api",
    getParentRoute: () => LayoutProjectSlugLayoutRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/$projectSlug": {
      id: "/_layout/$projectSlug";
      path: "/$projectSlug";
      fullPath: "/$projectSlug";
      preLoaderRoute: typeof LayoutProjectSlugImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/$projectSlug/_layout": {
      id: "/_layout/$projectSlug/_layout";
      path: "/$projectSlug";
      fullPath: "/$projectSlug";
      preLoaderRoute: typeof LayoutProjectSlugLayoutImport;
      parentRoute: typeof LayoutProjectSlugRoute;
    };
    "/_layout/$projectSlug/": {
      id: "/_layout/$projectSlug/";
      path: "/";
      fullPath: "/$projectSlug/";
      preLoaderRoute: typeof LayoutProjectSlugIndexImport;
      parentRoute: typeof LayoutProjectSlugImport;
    };
    "/$projectSlug/$workflowSlug/v/$version": {
      id: "/$projectSlug/$workflowSlug/v/$version";
      path: "/$projectSlug/$workflowSlug/v/$version";
      fullPath: "/$projectSlug/$workflowSlug/v/$version";
      preLoaderRoute: typeof ProjectSlugWorkflowSlugVVersionImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/$projectSlug/_layout/$workflowSlug/api": {
      id: "/_layout/$projectSlug/_layout/$workflowSlug/api";
      path: "/$workflowSlug/api";
      fullPath: "/$projectSlug/$workflowSlug/api";
      preLoaderRoute: typeof LayoutProjectSlugLayoutWorkflowSlugApiImport;
      parentRoute: typeof LayoutProjectSlugLayoutImport;
    };
    "/_layout/$projectSlug/_layout/$workflowSlug/versions": {
      id: "/_layout/$projectSlug/_layout/$workflowSlug/versions";
      path: "/$workflowSlug/versions";
      fullPath: "/$projectSlug/$workflowSlug/versions";
      preLoaderRoute: typeof LayoutProjectSlugLayoutWorkflowSlugVersionsImport;
      parentRoute: typeof LayoutProjectSlugLayoutImport;
    };
    "/_layout/$projectSlug/_layout/$workflowSlug/": {
      id: "/_layout/$projectSlug/_layout/$workflowSlug/";
      path: "/$workflowSlug";
      fullPath: "/$projectSlug/$workflowSlug";
      preLoaderRoute: typeof LayoutProjectSlugLayoutWorkflowSlugIndexImport;
      parentRoute: typeof LayoutProjectSlugLayoutImport;
    };
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  LayoutRoute: LayoutRoute.addChildren({
    LayoutProjectSlugRoute: LayoutProjectSlugRoute.addChildren({
      LayoutProjectSlugLayoutRoute: LayoutProjectSlugLayoutRoute.addChildren({
        LayoutProjectSlugLayoutWorkflowSlugApiRoute,
        LayoutProjectSlugLayoutWorkflowSlugVersionsRoute,
        LayoutProjectSlugLayoutWorkflowSlugIndexRoute,
      }),
      LayoutProjectSlugIndexRoute,
    }),
  }),
  AboutLazyRoute,
  LoginLazyRoute,
  ProjectSlugWorkflowSlugVVersionRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/about",
        "/login",
        "/$projectSlug/$workflowSlug/v/$version"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/$projectSlug"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/_layout/$projectSlug": {
      "filePath": "_layout.$projectSlug",
      "parent": "/_layout",
      "children": [
        "/_layout/$projectSlug/_layout",
        "/_layout/$projectSlug/"
      ]
    },
    "/_layout/$projectSlug/_layout": {
      "filePath": "_layout.$projectSlug/_layout.tsx",
      "parent": "/_layout/$projectSlug",
      "children": [
        "/_layout/$projectSlug/_layout/$workflowSlug/api",
        "/_layout/$projectSlug/_layout/$workflowSlug/versions",
        "/_layout/$projectSlug/_layout/$workflowSlug/"
      ]
    },
    "/_layout/$projectSlug/": {
      "filePath": "_layout.$projectSlug/index.tsx",
      "parent": "/_layout/$projectSlug"
    },
    "/$projectSlug/$workflowSlug/v/$version": {
      "filePath": "$projectSlug.$workflowSlug.v.$version.tsx"
    },
    "/_layout/$projectSlug/_layout/$workflowSlug/api": {
      "filePath": "_layout.$projectSlug/_layout.$workflowSlug/api.tsx",
      "parent": "/_layout/$projectSlug/_layout"
    },
    "/_layout/$projectSlug/_layout/$workflowSlug/versions": {
      "filePath": "_layout.$projectSlug/_layout.$workflowSlug/versions.tsx",
      "parent": "/_layout/$projectSlug/_layout"
    },
    "/_layout/$projectSlug/_layout/$workflowSlug/": {
      "filePath": "_layout.$projectSlug/_layout.$workflowSlug/index.tsx",
      "parent": "/_layout/$projectSlug/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
